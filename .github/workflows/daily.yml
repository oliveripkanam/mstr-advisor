name: Daily EOD Pipeline

on:
  workflow_dispatch:
  schedule:
    # 22:05 UTC every day
    - cron: '5 22 * * *'

jobs:
  eod:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies (if any)
        shell: bash
        run: |
          set -e
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            echo "No requirements.txt yet"
          fi

      - name: Run ingestion with retry
        shell: bash
        env:
          MAX_ATTEMPTS: 3
        run: |
          set -e
          attempt=0
          until [ "$attempt" -ge "$MAX_ATTEMPTS" ]
          do
            echo "Run attempt $((attempt+1)) at $(date -u +"%Y-%m-%dT%H:%M:%SZ")"
            python backend/app/ingest_prices.py
            status=$?
            if [ $status -eq 0 ]; then
              break
            fi
            attempt=$((attempt+1))
            echo "Retrying in 15s..."
            sleep 15
          done

      - name: Save status artifact
        shell: bash
        run: |
          mkdir -p data/public
          printf '{"last_run_utc":"%s","status":"ok"}\n' "$(date -u +%FT%TZ)" > data/public/status.json

      - name: Normalize MSTR for frontend
        shell: bash
        run: |
          python backend/app/normalize_mstr.py

      - name: Build enhanced status.json
        shell: bash
        run: |
          python backend/app/build_status.py

      - name: Compute MSTR technical features
        shell: bash
        run: |
          python backend/app/features_mstr.py

      - name: Compute cross-asset features and regimes
        shell: bash
        run: |
          python backend/app/crossasset_mstr.py

      - name: Generate baseline recommendation
        shell: bash
        run: |
          python backend/app/baseline_rules.py

      - name: Publish latest recommendation JSON
        shell: bash
        run: |
          python backend/app/publish_recommendation.py

      - name: Build explainability (narrative + drivers)
        shell: bash
        run: |
          python backend/app/explain_baseline.py

      - name: Generate 'What changed' summary
        shell: bash
        run: |
          python backend/app/what_changed_mstr.py

      - name: Backtest baseline (summary + equity)
        shell: bash
        run: |
          python backend/app/backtest_baseline.py

      # ML and labels run weekly; daily job focuses on baseline pipeline

      - name: Commit updated artifacts
        shell: bash
        run: |
          git config user.name "${GITHUB_ACTOR}"
          git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          git add -A
          if ! git diff --cached --quiet; then
            git commit -m "ci: update raw and public artifacts [skip ci]"
            git push
          else
            echo "No changes to commit"
          fi


